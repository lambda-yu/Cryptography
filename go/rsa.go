package main

import (
	"bytes"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"strings"
)

type keys struct {
	PrivateKey string
	PublicKey string
}

func Generatekey(keySize int) keys {
	// Generatekey generate private key and public key
	var key keys
	privateKey, err := rsa.GenerateKey(rand.Reader, keySize)
	if err != nil {
		key.PublicKey = ""
		key.PrivateKey = ""
		return key
	}
	// 私钥
	private := x509.MarshalPKCS1PrivateKey(privateKey)
	private_block := &pem.Block{
		Type:  "private rsa key",
		Bytes: private,
	}
	private_buffer := new(bytes.Buffer)
	_ = pem.Encode(private_buffer, private_block)

	// 公钥
	PublicKey := x509.MarshalPKCS1PublicKey(&privateKey.PublicKey)
	public_block := &pem.Block{
		Type:  "public rsa key",
		Bytes: PublicKey,
	}
	public_buffer := new(bytes.Buffer)
	_ = pem.Encode(public_buffer, public_block)
	key.PublicKey = public_buffer.String()
	key.PrivateKey = private_buffer.String()
	return key
}

// ReadKey 读取密钥，自动判断公私钥
func ReadKey(key string) (interface{}, interface{}) {
	block, _ := pem.Decode([]byte(key))
	if strings.Index(block.Type, "private") != -1 || strings.Index(block.Type, "PRIVATE") != -1 {
		key, err := x509.ParsePKCS1PrivateKey(block.Bytes)
		if err != nil {
			return nil, "parse private key error"
		}
		return key, nil
	} else if strings.Index(block.Type, "public") != -1 || strings.Index(block.Type, "PUBLIC") != -1 {
		key, err := x509.ParsePKCS1PublicKey(block.Bytes)
		if err != nil {
			return nil, "parse public key error"
		}
		return key, nil
	} else {
		return nil, "read key error"
	}
}

// RsaEncrypt 公钥加密,分段加密
func RsaEncrypt(plainText []byte, keyPath string) string {
	key, err := ReadKey(keyPath)
	if err != nil {
		panic(err)
	}
	publicKey := key.(*rsa.PublicKey)
	cipher := []byte{}
	seq := 100
	index := 0
	for ; index < len(plainText)-seq; index += 100 {
		data := plainText[index : index+seq]
		encryptData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, data)
		if err != nil {
			panic(err)
		}
		cipher = append(cipher, encryptData...)
	}

	data := plainText[index:len(plainText)]
	encryptData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, data)
	if err != nil {
		panic(err)
	}
	cipher = append(cipher, encryptData...)

	return base64.StdEncoding.EncodeToString(cipher)
}

// RsaDecrypt 私钥解密
func RsaDecrypt(cipherText string, keyPath string) string {
	key, err := ReadKey(keyPath)
	if err != nil {
		panic(err)
	}
	privateKey := key.(*rsa.PrivateKey)
	plain := []byte{}
	cipherText_str, _ := base64.StdEncoding.DecodeString((cipherText))
	for i := 0; i < len(cipherText_str); i += privateKey.Size() {
		encryptData, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, cipherText_str[i:i+1*privateKey.Size()])
		if err != nil {
			panic(err)
		}
		plain = append(plain, encryptData...)
	}
	return string(plain)
}

func main() {
	key := Generatekey(4096)
	fmt.Println(key.PrivateKey, key.PublicKey)
	msg := "你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312"
	data := RsaEncrypt([]byte(msg), key.PublicKey)
	fmt.Println(data)
	deDate := RsaDecrypt(data, key.PrivateKey)
	fmt.Println(deDate)
}
