package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"os"
	"strings"
)

// Generatekey generate private key and public key
func Generatekey(keySize int) {
	privateKey, err := rsa.GenerateKey(rand.Reader, keySize)
	if err != nil {
		panic(err)
	}

	// 私钥
	private := x509.MarshalPKCS1PrivateKey(privateKey)

	block := &pem.Block{
		Type:  "private rsa key",
		Bytes: private,
	}
	file, err := os.Create("private.pem")
	if err != nil {
		panic(err)
	}
	pem.Encode(file, block)
	file.Close()
	// 公钥
	PublicKey := x509.MarshalPKCS1PublicKey(&privateKey.PublicKey)

	block = &pem.Block{
		Type:  "public rsa key",
		Bytes: PublicKey,
	}
	file, err = os.Create("public.pem")
	if err != nil {
		panic(err)
	}
	pem.Encode(file, block)
	file.Close()
}

// ReadKey 读取密钥，自动判断公私钥
func ReadKey(name string) (interface{}, error) {
	file, err := os.Open(name)
	if err != nil {
		panic(err)
	}
	fileInfo, err := file.Stat()
	if err != nil {
		panic(err)
	}
	keyBuf := make([]byte, fileInfo.Size())

	_, err = file.Read(keyBuf)
	if err != nil {
		panic(err)
	}
	block, _ := pem.Decode(keyBuf)

	if strings.Index(block.Type, "private") != -1 {
		key, err := x509.ParsePKCS1PrivateKey(block.Bytes)
		if err != nil {
			panic(err)
		}
		return key, nil
	} else if strings.Index(block.Type, "public") != -1 {
		key, err := x509.ParsePKCS1PublicKey(block.Bytes)
		if err != nil {
			panic(err)
		}
		return key, nil
	} else {
		return nil, errors.New("read key error")
	}

}

// RsaEncrypt 公钥加密,分段加密
func RsaEncrypt(plainText []byte, keyPath string) []byte {
	key, err := ReadKey(keyPath)
	if err != nil {
		panic(err)
	}
	publicKey := key.(*rsa.PublicKey)
	cipher := []byte{}
	seq := 100
	index := 0
	for ; index < len(plainText)-seq; index += 100 {
		data := plainText[index : index+seq]
		encryptData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, data)
		if err != nil {
			panic(err)
		}
		cipher = append(cipher, encryptData...)
	}

	data := plainText[index:len(plainText)]
	encryptData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, data)
	if err != nil {
		panic(err)
	}
	cipher = append(cipher, encryptData...)

	return cipher
}

// RsaDecrypt 私钥解密
func RsaDecrypt(cipherText []byte, keyPath string) []byte {
	key, err := ReadKey(keyPath)
	if err != nil {
		panic(err)
	}
	privateKey := key.(*rsa.PrivateKey)
	plain := []byte{}
	for i := 0; i < len(cipherText); i += privateKey.Size() {
		encryptData, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, cipherText[i:i+1*privateKey.Size()])
		if err != nil {
			panic(err)
		}
		plain = append(plain, encryptData...)
	}
	return plain
}

func main() {
	// generatekey(4096)
	msg := "你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312你好啊12312312312312"
	data := RsaEncrypt([]byte(msg), "D:/go_projects/RSA/public.pem")
	fmt.Println(len(msg))
	deDate := RsaDecrypt(data, "D:/go_projects/RSA/private.pem")
	fmt.Println(msg == string(deDate))
}
